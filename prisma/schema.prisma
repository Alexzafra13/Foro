// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// npx prisma migrate dev --name init

// prisma/schema.prisma - CORREGIDO SIN ERRORES

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

// ========================================
// AUTHENTICATION & AUTHORIZATION
// ========================================

model Role {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(32)

  // Relations
  users User[]

  @@map("roles")
}

model User {
  id              Int       @id @default(autoincrement())
  username        String    @unique @db.VarChar(32)
  email           String    @unique @db.VarChar(100)
  passwordHash    String    @map("password_hash")
  avatarUrl       String?   @map("avatar_url")
  reputation      Int       @default(0)
  roleId          Int       @map("role_id")
  createdAt       DateTime  @default(now()) @map("created_at")
  isEmailVerified Boolean   @default(false) @map("is_email_verified")
  emailVerifiedAt DateTime? @map("email_verified_at")

  // Relations existentes
  role                    Role                     @relation(fields: [roleId], references: [id], onDelete: Restrict)
  posts                   Post[]                   @relation("PostAuthor")
  votes                   Vote[]
  notifications           Notification[]
  channelMembers          ChannelMember[]
  inviteCodesCreated      InviteCode[]             @relation("InviteCreator")
  inviteCodesUsed         InviteCode[]             @relation("InviteUser")
  emailVerificationTokens EmailVerificationToken[]

  // Nuevas relaciones para comentarios
  comments        Comment[]       @relation("CommentAuthor")
  deletedComments Comment[]       @relation("CommentDeletedBy")
  commentVotes    CommentVote[]
  commentReports  CommentReport[] @relation("CommentReporter")
  reviewedReports CommentReport[] @relation("CommentReviewer")

  @@map("users")
}

model InviteCode {
  code      String    @id @db.VarChar(64)
  createdBy Int?      @map("created_by")
  usedBy    Int?      @map("used_by")
  usedAt    DateTime? @map("used_at")
  createdAt DateTime  @default(now()) @map("created_at")

  // Relations
  creator User? @relation("InviteCreator", fields: [createdBy], references: [id], onDelete: SetNull)
  user    User? @relation("InviteUser", fields: [usedBy], references: [id], onDelete: SetNull)

  @@map("invite_codes")
}

// ========================================
// FORUM STRUCTURE
// ========================================

model Channel {
  id          Int      @id @default(autoincrement())
  categoryId  Int?     @map("category_id")
  name        String   @unique @db.VarChar(50)
  description String?
  icon        String?  @db.VarChar(32)
  position    Int      @default(0)
  isPrivate   Boolean  @default(false) @map("is_private")
  isVisible   Boolean  @default(true) @map("is_visible")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  category Category?       @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  posts    Post[]
  members  ChannelMember[]

  @@map("channels")
}

model ChannelMember {
  userId    Int @map("user_id")
  channelId Int @map("channel_id")

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  @@id([userId, channelId])
  @@map("channel_members")
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(50)
  description String?
  icon        String?  @db.VarChar(32)
  position    Int      @default(0)
  isVisible   Boolean  @default(true) @map("is_visible")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  channels Channel[]

  @@map("categories")
}

// ========================================
// CONTENT
// ========================================

model Post {
  id        Int       @id @default(autoincrement())
  channelId Int       @map("channel_id")
  authorId  Int?      @map("author_id")
  title     String
  content   String
  isLocked  Boolean   @default(false) @map("is_locked")
  isPinned  Boolean   @default(false) @map("is_pinned")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @map("updated_at")

  // Relations
  channel  Channel   @relation(fields: [channelId], references: [id], onDelete: Cascade)
  author   User?     @relation("PostAuthor", fields: [authorId], references: [id], onDelete: SetNull)
  comments Comment[]
  votes    Vote[]

  @@map("posts")
}

model Comment {
  id              Int       @id @default(autoincrement())
  postId          Int       @map("post_id")
  authorId        Int?      @map("author_id") // null si usuario eliminado
  parentCommentId Int?      @map("parent_comment_id") // Para threading
  content         String

  // Control de ediciones
  isEdited Boolean   @default(false) @map("is_edited")
  editedAt DateTime? @map("edited_at")
  editCount  Int       @default(0) @map("edit_count") 

  // Control de eliminación/moderación
  isDeleted      Boolean   @default(false) @map("is_deleted")
  deletedAt      DateTime? @map("deleted_at")
  deletedBy      Int?      @map("deleted_by") // Moderador que eliminó
  deletionReason String?   @map("deletion_reason") @db.VarChar(50) // "user_request", "moderation", "spam"
  isHidden       Boolean   @default(false) @map("is_hidden") // Oculto por moderación

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @map("updated_at")

  // Relations
  post          Post            @relation(fields: [postId], references: [id], onDelete: Cascade)
  author        User?           @relation("CommentAuthor", fields: [authorId], references: [id], onDelete: SetNull)
  parentComment Comment?        @relation("CommentReplies", fields: [parentCommentId], references: [id], onDelete: Cascade)
  replies       Comment[]       @relation("CommentReplies")
  deletedByUser User?           @relation("CommentDeletedBy", fields: [deletedBy], references: [id], onDelete: SetNull)
  votes         CommentVote[]
  reports       CommentReport[]

  @@map("comments")
}

// ========================================
// SISTEMA DE VOTACIÓN DE COMENTARIOS
// ========================================

model CommentVote {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  commentId Int      @map("comment_id")
  voteType  Int      @map("vote_type") @db.SmallInt // 1 for upvote, -1 for downvote
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
  @@map("comment_votes")
}

// ========================================
// SISTEMA DE REPORTES DE COMENTARIOS
// ========================================

model CommentReport {
  id          Int       @id @default(autoincrement())
  commentId   Int       @map("comment_id")
  reporterId  Int       @map("reporter_id")
  reason      String    @db.VarChar(20) // 'spam', 'harassment', 'inappropriate', 'other'
  description String?   @db.Text
  status      String    @default("pending") @db.VarChar(20) // 'pending', 'reviewed', 'dismissed', 'action_taken'
  reviewedBy  Int?      @map("reviewed_by")
  reviewedAt  DateTime? @map("reviewed_at")
  createdAt   DateTime  @default(now()) @map("created_at")

  // Relations
  comment  Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  reporter User    @relation("CommentReporter", fields: [reporterId], references: [id], onDelete: Cascade)
  reviewer User?   @relation("CommentReviewer", fields: [reviewedBy], references: [id], onDelete: SetNull)

  @@map("comment_reports")
}

// ========================================
// INTERACTIONS (Posts only - Comments have their own votes)
// ========================================

model Vote {
  id       Int @id @default(autoincrement())
  userId   Int @map("user_id")
  postId   Int @map("post_id")
  voteType Int @map("vote_type") @db.SmallInt // 1 for upvote, -1 for downvote

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("votes")
}

// ========================================
// NOTIFICATIONS
// ========================================

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  type      String   @db.VarChar(32)
  content   String?
  isRead    Boolean  @default(false) @map("is_read")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// ========================================
// EMAIL VERIFICATION
// ========================================

model EmailVerificationToken {
  id        Int       @id @default(autoincrement())
  userId    Int       @map("user_id")
  token     String    @unique @db.VarChar(255)
  expiresAt DateTime  @map("expires_at")
  createdAt DateTime  @default(now()) @map("created_at")
  usedAt    DateTime? @map("used_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_verification_tokens")
}