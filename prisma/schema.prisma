// prisma/schema.prisma - VERSIÓN COMPLETA CON SISTEMA DE MODERACIÓN AVANZADA

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

// ========================================
// AUTHENTICATION & AUTHORIZATION
// ========================================

model Role {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(32)

  // Relations
  users User[]

  @@map("roles")
}

model User {
  id              Int       @id @default(autoincrement())
  username        String    @unique @db.VarChar(32)
  email           String    @unique @db.VarChar(100)
  passwordHash    String    @map("password_hash")
  avatarUrl       String?   @map("avatar_url") @db.VarChar(500)
  bio             String?   @db.Text
  reputation      Int       @default(0)
  roleId          Int       @map("role_id")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  isEmailVerified Boolean   @default(false) @map("is_email_verified")
  emailVerifiedAt DateTime? @map("email_verified_at")
  
  // ✅ CAMPOS PARA ADMINISTRACIÓN BÁSICA (YA EXISTENTES)
  lastLoginAt     DateTime? @map("last_login_at")
  isBanned        Boolean   @default(false) @map("is_banned")
  bannedAt        DateTime? @map("banned_at")
  bannedBy        Int?      @map("banned_by")
  banReason       String?   @map("ban_reason") @db.VarChar(255)

  // ✅ NUEVOS CAMPOS PARA MODERACIÓN AVANZADA
  isSilenced      Boolean   @default(false) @map("is_silenced")
  silencedUntil   DateTime? @map("silenced_until")
  warningsCount   Int       @default(0) @map("warnings_count")
  lastWarningAt   DateTime? @map("last_warning_at")

  // Relations existentes
  role                    Role                     @relation(fields: [roleId], references: [id], onDelete: Restrict)
  posts                   Post[]                   @relation("PostAuthor")
  deletedPosts            Post[]                   @relation("PostDeletedBy")
  votes                   Vote[]
  notifications           Notification[]
  channelMembers          ChannelMember[]
  inviteCodesCreated      InviteCode[]             @relation("InviteCreator")
  inviteCodesUsed         InviteCode[]             @relation("InviteUser")
  emailVerificationTokens EmailVerificationToken[]

  // Relaciones para comentarios
  comments        Comment[]       @relation("CommentAuthor")
  deletedComments Comment[]       @relation("CommentDeletedBy")
  commentVotes    CommentVote[]
  commentReports  CommentReport[] @relation("CommentReporter")
  reviewedReports CommentReport[] @relation("CommentReviewer")

  // ✅ RELACIONES PARA PERFIL Y ADMINISTRACIÓN
  settings             UserSettings?
  activityLogs         ActivityLog[]
  bannedByUser         User?                    @relation("UserBans", fields: [bannedBy], references: [id], onDelete: SetNull)
  usersBanned          User[]                   @relation("UserBans")
  passwordResetTokens  PasswordResetToken[]
  postViews            PostView[]

  // ✅ NUEVAS RELACIONES PARA SANCIONES
  sanctions         UserSanction[] @relation("UserSanctions")
  sanctionsApplied  UserSanction[] @relation("ModeratorSanctions") 
  sanctionsRevoked  UserSanction[] @relation("RevokerSanctions")

  @@map("users")
}

// ✅ NUEVA TABLA: SISTEMA DE SANCIONES COMPLETO
model UserSanction {
  id           Int       @id @default(autoincrement())
  userId       Int       @map("user_id")
  moderatorId  Int       @map("moderator_id")
  sanctionType String    @map("sanction_type") @db.VarChar(30) 
  // Tipos: 'warning', 'temp_suspend', 'permanent_ban', 'silence', 'restriction', 'ip_ban'
  
  reason         String    @db.Text
  durationHours  Int?      @map("duration_hours") // null = permanente
  startsAt       DateTime  @map("starts_at") @default(now())
  expiresAt      DateTime? @map("expires_at")
  isActive       Boolean   @default(true) @map("is_active")
  
  // Metadatos
  severity       String    @default("medium") @db.VarChar(20) // 'low', 'medium', 'high', 'critical'
  isAutomatic    Boolean   @default(false) @map("is_automatic") // Si fue aplicada automáticamente
  evidence       Json?     // Evidencia adicional (URLs, IPs, etc.)
  
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  revokedAt      DateTime? @map("revoked_at")
  revokedBy      Int?      @map("revoked_by")
  revokeReason   String?   @map("revoke_reason") @db.Text
  
  // Relations
  user      User  @relation("UserSanctions", fields: [userId], references: [id], onDelete: Cascade)
  moderator User  @relation("ModeratorSanctions", fields: [moderatorId], references: [id], onDelete: Restrict)
  revoker   User? @relation("RevokerSanctions", fields: [revokedBy], references: [id], onDelete: SetNull)
  
  @@index([userId, isActive])
  @@index([sanctionType, isActive])
  @@index([expiresAt])
  @@index([moderatorId, createdAt])
  @@map("user_sanctions")
}

model InviteCode {
  code      String    @id @db.VarChar(64)
  createdBy Int?      @map("created_by")
  usedBy    Int?      @map("used_by")
  usedAt    DateTime? @map("used_at")
  createdAt DateTime  @default(now()) @map("created_at")

  // Relations
  creator User? @relation("InviteCreator", fields: [createdBy], references: [id], onDelete: SetNull)
  user    User? @relation("InviteUser", fields: [usedBy], references: [id], onDelete: SetNull)

  @@map("invite_codes")
}

// ✅ NUEVA TABLA: CONFIGURACIONES DE USUARIO
model UserSettings {
  id                    Int      @id @default(autoincrement())
  userId                Int      @unique @map("user_id")
  theme                 String   @default("system") @db.VarChar(20) // "light", "dark", "system"
  language              String   @default("es") @db.VarChar(5) // "es", "en", "fr"
  timezone              String   @default("UTC") @db.VarChar(50)
  emailNotifications    Boolean  @default(true) @map("email_notifications")
  postNotifications     Boolean  @default(true) @map("post_notifications")
  commentNotifications  Boolean  @default(true) @map("comment_notifications")
  privateProfile        Boolean  @default(false) @map("private_profile")
  showEmail             Boolean  @default(false) @map("show_email")
  showLastSeen          Boolean  @default(true) @map("show_last_seen")
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

// ✅ NUEVA TABLA: LOGS DE ACTIVIDAD
model ActivityLog {
  id        Int      @id @default(autoincrement())
  userId    Int?     @map("user_id")
  action    String   @db.VarChar(50) // "login", "logout", "post_created", "user_banned", etc.
  details   Json?    // Información adicional específica de la acción
  ipAddress String?  @map("ip_address") @db.VarChar(45) // IPv4/IPv6
  userAgent String?  @map("user_agent") @db.Text
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId, createdAt])
  @@index([action, createdAt])
  @@map("activity_logs")
}

// ========================================
// FORUM STRUCTURE
// ========================================

model Channel {
  id          Int      @id @default(autoincrement())
  categoryId  Int?     @map("category_id")
  name        String   @unique @db.VarChar(50)
  description String?
  icon        String?  @db.VarChar(32)
  position    Int      @default(0)
  isPrivate   Boolean  @default(false) @map("is_private")
  isVisible   Boolean  @default(true) @map("is_visible")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  category Category?       @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  posts    Post[]
  members  ChannelMember[]

  @@map("channels")
}

model ChannelMember {
  userId    Int @map("user_id")
  channelId Int @map("channel_id")

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  @@id([userId, channelId])
  @@map("channel_members")
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(50)
  description String?
  icon        String?  @db.VarChar(32)
  position    Int      @default(0)
  isVisible   Boolean  @default(true) @map("is_visible")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  channels Channel[]

  @@map("categories")
}

// ========================================
// CONTENT
// ========================================

model Post {
  id        Int       @id @default(autoincrement())
  channelId Int       @map("channel_id")
  authorId  Int?      @map("author_id")
  title     String
  content   String
  views     Int       @default(0)
  isLocked  Boolean   @default(false) @map("is_locked")
  isPinned  Boolean   @default(false) @map("is_pinned")
  
  // ✅ CAMPOS DE MODERACIÓN
  isHidden       Boolean   @default(false) @map("is_hidden")
  deletedBy      Int?      @map("deleted_by")
  deletionReason String?   @map("deletion_reason") @db.VarChar(50)
  
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @map("updated_at")

  // Relations
  channel       Channel   @relation(fields: [channelId], references: [id], onDelete: Cascade)
  author        User?     @relation("PostAuthor", fields: [authorId], references: [id], onDelete: SetNull)
  deletedByUser User?     @relation("PostDeletedBy", fields: [deletedBy], references: [id], onDelete: SetNull)
  comments      Comment[]
  votes         Vote[]
  postViews     PostView[]

  @@map("posts")
}

// ========================================
// SISTEMA DE TRACKING DE VISTAS
// ========================================

model PostView {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  postId    Int      @map("post_id")
  ipAddress String?  @map("ip_address") @db.VarChar(45)
  userAgent String?  @map("user_agent") @db.Text
  viewedAt  DateTime @default(now()) @map("viewed_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  // Un usuario solo puede registrar una vista por post por día
  @@unique([userId, postId])
  @@index([postId, viewedAt])
  @@index([userId, viewedAt])
  @@map("post_views")
}

model Comment {
  id              Int       @id @default(autoincrement())
  postId          Int       @map("post_id")
  authorId        Int?      @map("author_id")
  parentCommentId Int?      @map("parent_comment_id")
  content         String

  // Control de ediciones
  isEdited Boolean   @default(false) @map("is_edited")
  editedAt DateTime? @map("edited_at")
  editCount Int      @default(0) @map("edit_count")

  // Control de eliminación/moderación
  isDeleted      Boolean   @default(false) @map("is_deleted")
  deletedAt      DateTime? @map("deleted_at")
  deletedBy      Int?      @map("deleted_by")
  deletionReason String?   @map("deletion_reason") @db.VarChar(50)
  isHidden       Boolean   @default(false) @map("is_hidden")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @map("updated_at")

  // Relations
  post          Post            @relation(fields: [postId], references: [id], onDelete: Cascade)
  author        User?           @relation("CommentAuthor", fields: [authorId], references: [id], onDelete: SetNull)
  parentComment Comment?        @relation("CommentReplies", fields: [parentCommentId], references: [id], onDelete: Cascade)
  replies       Comment[]       @relation("CommentReplies")
  deletedByUser User?           @relation("CommentDeletedBy", fields: [deletedBy], references: [id], onDelete: SetNull)
  votes         CommentVote[]
  reports       CommentReport[]

  @@map("comments")
}

// ========================================
// SISTEMA DE VOTACIÓN DE COMENTARIOS
// ========================================

model CommentVote {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  commentId Int      @map("comment_id")
  voteType  Int      @map("vote_type") @db.SmallInt // 1 for upvote, -1 for downvote
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
  @@map("comment_votes")
}

// ========================================
// SISTEMA DE REPORTES DE COMENTARIOS
// ========================================

model CommentReport {
  id          Int       @id @default(autoincrement())
  commentId   Int       @map("comment_id")
  reporterId  Int       @map("reporter_id")
  reason      String    @db.VarChar(20) // 'spam', 'harassment', 'inappropriate', 'other'
  description String?   @db.Text
  status      String    @default("pending") @db.VarChar(20) // 'pending', 'reviewed', 'dismissed', 'action_taken'
  reviewedBy  Int?      @map("reviewed_by")
  reviewedAt  DateTime? @map("reviewed_at")
  createdAt   DateTime  @default(now()) @map("created_at")

  // Relations
  comment  Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  reporter User    @relation("CommentReporter", fields: [reporterId], references: [id], onDelete: Cascade)
  reviewer User?   @relation("CommentReviewer", fields: [reviewedBy], references: [id], onDelete: SetNull)

  @@map("comment_reports")
}

// ========================================
// INTERACTIONS (Posts only - Comments have their own votes)
// ========================================

model Vote {
  id       Int @id @default(autoincrement())
  userId   Int @map("user_id")
  postId   Int @map("post_id")
  voteType Int @map("vote_type") @db.SmallInt // 1 for upvote, -1 for downvote

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("votes")
}

// ========================================
// NOTIFICATIONS
// ========================================

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  type      String   @db.VarChar(32)
  content   String?
  isRead    Boolean  @default(false) @map("is_read")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// ========================================
// EMAIL VERIFICATION & PASSWORD RESET
// ========================================

model EmailVerificationToken {
  id        Int       @id @default(autoincrement())
  userId    Int       @map("user_id")
  token     String    @unique @db.VarChar(255)
  expiresAt DateTime  @map("expires_at")
  createdAt DateTime  @default(now()) @map("created_at")
  usedAt    DateTime? @map("used_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_verification_tokens")
}

model PasswordResetToken {
  id        Int       @id @default(autoincrement())
  userId    Int       @map("user_id")
  token     String    @unique @db.VarChar(255)
  expiresAt DateTime  @map("expires_at")
  createdAt DateTime  @default(now()) @map("created_at")
  usedAt    DateTime? @map("used_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_reset_tokens")
}